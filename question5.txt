Question #5: Array Sorting
Write an algorithm that sorts an array without using the sort() method. There are many different sorting algorithms — take the time to read about the following:

Quick sort
Merge sort
Heap sort
Insertion sort
Bubble sort
Selection sort
You may implement any of the above algorithms (or your own) to solve the problem — as long as it doesn't use sort().

Example
Input: [9, 2, 7, 12]

Output: [2, 7, 9, 12]

//What I know:
-- If i were to use merge sort, I would split the array in two, using recursion I would continue to split those subarrays until I have a length of two, then I would compare those two numbers, then I would do that to the subarray on the right, merge those two sorted arrays...all the way up to the full array. This would take two recursive functions, one that sorts a sublist, and one that merges list from left to right.
-- In my base case for the sort portion is a list of 0 or one elements --> if (array.length <= 0) { return array }
-- I would need to initialize an empty array for the left and right --> let left = [], let right = []
-- Then I would loop through the array thats been passed into my sort function. array.forEach(element, index) -> If index < (array.length)/2 -> left.push(element), else right.push(element)
-- Now I would call sort again on left and right
-- Then I would return the merge function, passing both left and right as values.

-- The merge function takes a left and right array. I initialize an empty array as my result --> result = []
-- I would loop through left and right while both are not empty --> while (left.length > 0 && right.length > 0) if (left[0] <= right[0]) { result.push(left.shift())} else { result.push(right.shift())}

-- There may be elements left so I have two more checks--> while (left.length > 0) { result.push(left.shift())}, while (right.length > 0) { result.push(right.shift())}
-- finally return result



Merge Sort Javascript:

function sort(array) {
  if (array.length <= 1) {
    return array
  }
  let left = [];
  let right = [];
  array.forEach((element, index) => {
    if (index < (array.length)/2) {
      left.push(element)
    } else {
      right.push(element)
    }
  });
  console.log('left: ' + left)
  console.log('right:' + right)
  left = sort(left);
  right = sort(right);

  return merge(left, right);
}

function merge(left, right) {
  let result = [];
  while (left.length > 0 && right.length > 0) {
    if (left[0] <= right[0]) {
      result.push(left.shift())
    } else {
      result.push(right.shift());
    }
  }
  while (left.length > 0) {
    result.push(left.shift())
  }
  while (right.length > 0) {
    result.push(right.shift())
  }
  console.log('merge result: ' + result)
  return result
}

sort([9, 2, 7, 12])
left: 9,2
right:7,12
left: 9
right:2
merge result: 2,9
left: 7
right:12
merge result: 7,12
merge result: 2,7,9,12
[ 2, 7, 9, 12 ]